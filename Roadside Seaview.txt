
#include<windows.h>

#include <iostream>

#include <GL/glut.h>

#include <math.h>

using namespace std;


float _move_sun = 1.00f;

GLint plane_position = 0;

GLint boat_position = 0;

GLint boat_far_position = 0;

GLint sun_position = 50;

GLint cloud1_position = 0;

GLint cloud2_position = 0;

GLint cloud3_position = 0;

GLint boat_speed = 6;

GLint boat_far_speed = 2;


float _rain = 0.0f;

bool rainday = false;

bool night = false;


float car1PositionX = 0.0;

float car2PositionX = 1920.0;

//car 1

void car1(float Tx, float Ty, float scale) {

    glPushMatrix();

    glTranslatef(Tx, Ty, 0.0);



    // Car body

    glBegin(GL_POLYGON);

    glColor3ub(255,0, 0);//red

    glVertex2f(0, 0);

    glVertex2f(60 * scale, 0);

    glVertex2f(60 * scale, 30 * scale);

    glVertex2f(0, 30 * scale);

    glEnd();



    // Car roof

    glBegin(GL_POLYGON);

    glColor3ub(255, 0, 255);//blue

    glVertex2f(10 * scale, 30 * scale);

    glVertex2f(50 * scale, 30 * scale);

    glVertex2f(45* scale, 40 * scale);

    glVertex2f(15* scale, 40 * scale);

    glEnd();



    // Wheels

    glColor3ub(0, 0, 0);//black

    glBegin(GL_TRIANGLE_FAN);

    for (int i = 0; i < 360; i++) {

        float theta = i * 3.14159 / 180.0;

        float x = 15* scale + 10* scale * cos(theta);

        float y = -7.5 * scale + 10* scale * sin(theta);

        glVertex2f(x, y);

    }

    glEnd();


//showing two cars together

    glBegin(GL_TRIANGLE_FAN);

    for (int i = 0; i < 360; i++) {

        float theta = i * 3.14159 / 180.0;

        float x = 45 * scale + 10 * scale * cos(theta);

        float y = -7.5 * scale + 10 * scale * sin(theta);

        glVertex2f(x, y);

    }


    glEnd();



    glPopMatrix();

}



//2nd car

void car2(float Tx, float Ty, float scale) {

    glPushMatrix();

    glTranslatef(Tx, Ty, 0.0);

    // Car body

    glBegin(GL_POLYGON);

    glColor3ub(178,102,255); // second car //lavender

    glVertex2f(0, 0);

    glVertex2f(60 * scale, 0);

    glVertex2f(60 * scale, 30 * scale);

    glVertex2f(0, 30 * scale);
    glEnd();



    // Car roof

    glBegin(GL_POLYGON);

    glColor3ub(255, 255, 0); //second car //yellow

    glVertex2f(10 * scale, 30 * scale);

    glVertex2f(50 * scale, 30 * scale);

    glVertex2f(45 * scale, 40 * scale);

    glVertex2f(15 * scale, 40 * scale);

    glEnd();



    // Wheels

    glColor3ub(0, 0, 0);//black

    glBegin(GL_TRIANGLE_FAN);

    for (int i = 0; i < 360; i++) {

        float theta = i * 3.14159 / 180.0;

        float x = 15 * scale + 10 * scale * cos(theta); // Adjusted position

        float y = -7.5 * scale + 10 * scale * sin(theta); // Adjusted position

        glVertex2f(x, y);

    }

    glEnd();



    glBegin(GL_TRIANGLE_FAN);

    for (int i = 0; i < 360; i++) {

        float theta = i * 3.14159 / 180.0;

        float x = 45 * scale + 10 * scale * cos(theta); // Adjusted position

        float y = -7.5 * scale + 10 * scale * sin(theta); // Adjusted position

        glVertex2f(x, y);

    }

    glEnd();



    glPopMatrix();

}







void circle(float x, float y, float radius, float height)

{

    int triangleAmount = 360;

    glBegin(GL_TRIANGLE_FAN);

    glVertex2f(x, y);

    for (int i = 0; i <= 360; i++)

        glVertex2f(x + (radius * cos(i * 2 * 3.1416 / triangleAmount)), y + (height * sin(i * 2 * 3.1416 / triangleAmount)));

    glEnd();

}



void sun()//Puja

{
    if(_move_sun<0.10f )

    {

        glPushMatrix();

        glTranslatef(0.0f,sun_position, 0.0f);

        glColor3ub(225, 255, 0);//yellow

        circle(1190, 100, 70, 70);

        glPopMatrix();

    }

    else

    {

        glMatrixMode(GL_MODELVIEW);

        glPushMatrix();

        glTranslatef(0.0f,sun_position, 0.0f);

        glColor3ub(255,153,51);//light orange

        circle(1190, 900, 70, 70);

        glPopMatrix();



    }







}



void sky()

{



    if(night)

    {

        glBegin(GL_QUADS);

        glColor3ub(41, 40, 40);//sky blue

        glVertex2f(0, 500);

        glVertex2f(1920, 500);



        //sky top

        glColor3ub(20, 20, 20);

        glVertex2f(1920, 1080);

        glVertex2f(0, 1080);

        glEnd();



    }

    else

    {

        if(rainday)

        {



        glBegin(GL_QUADS);

        glColor3f(0.50, 0.58, 0.60);

        glVertex2f(0, 500);

        glVertex2f(1920, 500);



            //sky top

            glColor3f(0.5647, 0.6196, 0.6235);

            glVertex2f(1920, 1080);

            glVertex2f(0, 1080);

            glEnd();



        }

        else

        {

            if(_move_sun<=1.00f && _move_sun>=0.90f)

            {

             //normal sunny day

                glClear (GL_COLOR_BUFFER_BIT);

                glBegin(GL_QUADS);

                //sky top

                 glColor3f(0.529, 0.808, 0.922);

                glVertex2f(1920, 1080);

                glVertex2f(0, 1080);



                glColor3f(0.529, 0.808, 0.980);

                glVertex2f(0, 500);

                glVertex2f(1920, 500);

                glEnd();

            }


            else if(_move_sun<0.90f && _move_sun>=0.55f)

            {
                //sunset

                glBegin(GL_QUADS);

                glColor3f(0.000, 0.749, 1.000);

                glVertex2f(1920, 1080);

                glVertex2f(0, 1080);



                glColor3f(0.8, 1.000, 1.000);

                glVertex2f(0, 500);

                glVertex2f(1920, 500);

                glEnd();

            }

            else if(_move_sun<0.55f && _move_sun>=0.35f)

            {
                //middle sunset

                glBegin(GL_QUADS);

                glColor3f(0.000, 0.749, 1.000);

                glVertex2f(1920, 1080);

                glVertex2f(0, 1080);



                glColor3f(1.000, 0.961, 0.933);

                glVertex2f(0, 500);

                glVertex2f(1920, 500);

                glEnd();

            }

            else if(_move_sun<0.35f && _move_sun>=0.25f)

            {
                //sunset

                glBegin(GL_QUADS);

                glColor3f(0.529, 0.808, 0.980);

                glVertex2f(1920, 1080);

                glVertex2f(0, 1080);



                glColor3f(1.000, 0.855, 0.725);

                glVertex2f(0, 500);

                glVertex2f(1920, 500);

                glEnd();

            }

            else

            {    //sunset

                glBegin(GL_QUADS);

                glColor3f(0.529, 0.808, 0.980);

                glVertex2f(1920, 1080);

                glVertex2f(0, 1080);



                glColor3f(0.957, 0.643, 0.376);

                glVertex2f(0, 500);

                glVertex2f(1920, 500);

                glEnd();

            }





        }



    }



}



void hill()

{



    //1st hill

    glBegin(GL_POLYGON);

    if(night)glColor3ub(5,28,5);

    else glColor3ub(12, 105, 12);



    glVertex2f(250, 500);

    glVertex2f(879, 698);

    glVertex2f(920, 686);

    glVertex2f(954, 674);

    glVertex2f(965, 668);

    glVertex2f(970, 664);

    glVertex2f(970, 662);

    glVertex2f(984, 650);

    glVertex2f(1155, 600);

    glVertex2f(1155, 600);

    glVertex2f(1400, 600);

    glVertex2f(1400, 500);

    glEnd();





   //2nd hill
  if(night)glColor3ub(5,28,5);

    else glColor3ub(12, 105, 12);

    glBegin(GL_POLYGON);

    glVertex2f(1166, 500);

    glVertex2f(1166, 535);

    glVertex2f(1205, 550);

    glVertex2f(1238, 603);

    glVertex2f(1398, 667);

    glVertex2f(1436, 647);

    glVertex2f(1460, 671);

    glVertex2f(1525, 691);

    glVertex2f(1532, 708);

    glVertex2f(1568, 729);

    glVertex2f(1589, 750);

    glVertex2f(1718, 764);

    glVertex2f(1734, 770);

    glVertex2f(1760, 747);

    glVertex2f(1782, 753);

    glVertex2f(1829, 722);

    glVertex2f(1850, 696);

    glVertex2f(1859, 702);

    glVertex2f(1920, 685);

    glVertex2f(1920, 500);

    glEnd();





    //hill shadow

    glBegin(GL_POLYGON);

    if(!night)glColor3ub(68, 201, 68);

    else glColor3ub(13,44,13);

   //1st hill shadow

    glBegin(GL_POLYGON);

    glVertex2f(813, 531);

    glVertex2f(836, 572);

    glVertex2f(836, 603);

    glVertex2f(821, 640);

    glVertex2f(827, 660);

    glVertex2f(808, 632);

    glVertex2f(805, 586);

    glVertex2f(775, 552);

    glVertex2f(694, 517);

    glVertex2f(746, 540);

    glVertex2f(836, 520);

    glEnd();

    //2nd hill shadow

    glBegin(GL_POLYGON);

    glVertex2f(1611, 593);

    glVertex2f(1646, 644);

    glVertex2f(1646, 663);

    glVertex2f(1606, 632);

    glVertex2f(1556, 622);

    glVertex2f(1489, 590);

    glVertex2f(1455, 514);

    glVertex2f(1449, 554);

    glVertex2f(1700, 590);

    glEnd();



    glBegin(GL_POLYGON);

    glVertex2f(1697, 631);

    glVertex2f(1677, 665);

    glVertex2f(1682, 705);

    glVertex2f(1705, 657);

    glVertex2f(1731, 621);

    glVertex2f(1796, 585);

    glVertex2f(1828, 534);

    glVertex2f(1759, 505);

    glVertex2f(1666, 583);

    glVertex2f(1692, 556);

    glVertex2f(1685, 593);

    glEnd();



    glBegin(GL_POLYGON);

    glVertex2f(1742, 742);

    glVertex2f(1733, 765);

    glVertex2f(1753, 748);

    glVertex2f(1770, 721);

    glVertex2f(1832, 689);

    glVertex2f(1820, 665);

    glVertex2f(1754, 668);

    glVertex2f(1736, 708);

    glEnd();



    glBegin(GL_POLYGON);

    glVertex2f(1901, 673);

    glVertex2f(1880, 687);

    glVertex2f(1914, 682);

    glVertex2f(1914, 633);

    glVertex2f(1910, 727);

    glVertex2f(1902, 602);

    glVertex2f(1902, 641);

    glVertex2f(1871, 598);

    glVertex2f(1867, 628);

    glVertex2f(1896, 655);

    glEnd();



}



void ground()

{

   if(!night)glColor3ub(23, 173, 30);

    else glColor3ub(10,59,13);//green

    glBegin(GL_POLYGON);

    glVertex2f(0, 500);

    glVertex2f(1920, 500);

    glVertex2f(1920, 400);

    glVertex2f(0, 400);

    glEnd();



}





void road()

{

    if(!night)glColor3ub(128,128,128);//gray

    else glColor3ub(0,0,0);//black

    glBegin(GL_POLYGON);

    glVertex2f(0, 450);

    glVertex2f(1920, 450);

    glVertex2f(1920, 380);

    glVertex2f(0,380);

    glEnd();





}



void beach(){

if(!night)glColor3ub(255,204,153);//mati colour

    else glColor3ub(255,153,51);

    glBegin(GL_POLYGON);

    glVertex2f(0, 380);

    glVertex2f(1920, 380);

    glVertex2f(1920, 300);

    glVertex2f(0,300);

    glEnd();



}



void sea()
{
    if(!night)glColor3ub(0,102,204);//blue

  else glColor3ub(0,0,153);//dark blue

    glBegin(GL_QUADS);

    glVertex2f(0, 0);

    glVertex2f(1920, 0);

    glVertex2f(1920, 300);

    glVertex2f(0, 300);

    glEnd();

}

//house 1
void house1(float Tx = 0, float Ty = 0, float m = 1) {

    // Wall Shadowed
    glBegin(GL_POLYGON);
    glColor3ub(255, 228, 196); // Bisque
    glVertex2f(Tx + m * 0, Ty + m * 0);
    glVertex2f(Tx + m * 40, Ty + m * 0);
    glVertex2f(Tx + m * 40, Ty + m * 52);
    glVertex2f(Tx + m * 20, Ty + m * 74);
    glVertex2f(Tx + m * 0.26, Ty + m * 45);
    glEnd();

    // Side Wall
    glBegin(GL_QUADS);
    glColor3ub(255, 165, 79); // Light Salmon
    glVertex2f(Tx + m * 40, Ty + m * 0);
    glVertex2f(Tx + m * 101, Ty + m * 0);
    glVertex2f(Tx + m * 101, Ty + m * 45);
    glVertex2f(Tx + m * 40, Ty + m * 45);
    glEnd();

    // Roof
    glBegin(GL_QUADS);
    glColor3ub(255, 255, 71); // Tomato red
    glVertex2f(Tx + m * 20, Ty + m * 74);
    glVertex2f(Tx + m * 40, Ty + m * 45);
    glVertex2f(Tx + m * 101, Ty + m * 45);
    glVertex2f(Tx + m * 81, Ty + m * 74);
    glEnd();

    // Windows
    glBegin(GL_QUADS);
    glColor3ub(0,0,0);//black
    glVertex2f(Tx + m * 13, Ty + m * 10);
    glVertex2f(Tx + m * 27, Ty + m * 10);
    glVertex2f(Tx + m * 27, Ty + m * 35);
    glVertex2f(Tx + m * 13, Ty + m * 35);

    glColor3ub(0,0,0);//black
    glVertex2f(Tx + m * 45, Ty + m * 13);
    glVertex2f(Tx + m * 55, Ty + m * 13);
    glVertex2f(Tx + m * 55, Ty + m * 27);
    glVertex2f(Tx + m * 45, Ty + m * 27);

    glVertex2f(Tx + m * 85, Ty + m * 13);
    glVertex2f(Tx + m * 95, Ty + m * 13);
    glVertex2f(Tx + m * 95, Ty + m * 27);
    glVertex2f(Tx + m * 85, Ty + m * 27);
    glEnd();

    // Door
    glBegin(GL_QUADS);
    glColor3ub(0,0,0);//black
    glVertex2f(Tx + m * 80, Ty + m * 0);
    glVertex2f(Tx + m * 60, Ty + m * 0);
    glVertex2f(Tx + m * 60, Ty + m * 35);
    glVertex2f(Tx + m * 80, Ty + m * 35);
    glEnd();

}



//2nd house

void house2(float Tx = 0, float Ty = 0, float m = 1)

{

    //Wall Shadowed

    glBegin(GL_POLYGON);

    glColor3ub(255,102,102);//orange

    glVertex2f(Tx + m * 0, Ty + m * 0);

    glVertex2f(Tx + m * 40, Ty + m * 0);

    glVertex2f(Tx + m * 40, Ty + m * 52);

    glVertex2f(Tx + m * 20, Ty + m * 74);

    glVertex2f(Tx + m * 0.26, Ty + m * 45);

    glEnd();



    //side wall

    glBegin(GL_QUADS);

    glColor3ub(255,0,0);//red

    glVertex2f(Tx + m * 40, Ty + m * 0);

    glVertex2f(Tx + m * 101, Ty + m * 0);

    glVertex2f(Tx + m * 101, Ty + m * 45);

    glVertex2f(Tx + m * 40, Ty + m * 45);



    //roof

    glBegin(GL_QUADS);

    glColor3ub(153,0,0);

    glVertex2f(Tx + m * 20, Ty + m * 74);

    glVertex2f(Tx + m * 40, Ty + m * 45);

    glVertex2f(Tx + m * 101, Ty + m * 45);

    glVertex2f(Tx + m * 81, Ty + m * 74);

    //windows

    glBegin(GL_QUADS);

    glColor3ub(12, 4, 51);

    glVertex2f(Tx + m * 13, Ty + m * 10);

    glVertex2f(Tx + m * 27, Ty + m * 10);

    glVertex2f(Tx + m * 27, Ty + m * 35);

    glVertex2f(Tx + m * 13, Ty + m * 35);

    glEnd();


    //door

    glBegin(GL_QUADS);

    glColor3ub(12, 4, 51);

    glVertex2f(Tx + m * 80, Ty + m * 0);

    glVertex2f(Tx + m * 60, Ty + m * 0);

    glVertex2f(Tx + m * 60, Ty + m * 35);

    glVertex2f(Tx + m * 80, Ty + m * 35);

    glEnd();



}

//3rd house

void house3(float Tx = 0, float Ty = 0, float m = 1) {

    // Wall Shadowed
    glBegin(GL_POLYGON);
    glColor3ub(173, 216, 230); // Light Blue
    glVertex2f(Tx + m * 0, Ty + m * 0);
    glVertex2f(Tx + m * 40, Ty + m * 0);
    glVertex2f(Tx + m * 40, Ty + m * 52);
    glVertex2f(Tx + m * 20, Ty + m * 74);
    glVertex2f(Tx + m * 0.26, Ty + m * 45);
    glEnd();

    // Side Wall
    glBegin(GL_QUADS);
    glColor3ub(0, 128, 255); // Blue
    glVertex2f(Tx + m * 40, Ty + m * 0);
    glVertex2f(Tx + m * 101, Ty + m * 0);
    glVertex2f(Tx + m * 101, Ty + m * 45);
    glVertex2f(Tx + m * 40, Ty + m * 45);
    glEnd();

    // Roof
    glBegin(GL_QUADS);
    glColor3ub(25, 25, 112); // Midnight Blue
    glVertex2f(Tx + m * 20, Ty + m * 74);
    glVertex2f(Tx + m * 40, Ty + m * 45);
    glVertex2f(Tx + m * 101, Ty + m * 45);
    glVertex2f(Tx + m * 81, Ty + m * 74);
    glEnd();

    // Windows
    glBegin(GL_QUADS);
    glColor3ub(0,0,0);//black
    glVertex2f(Tx + m * 13, Ty + m * 10);
    glVertex2f(Tx + m * 27, Ty + m * 10);
    glVertex2f(Tx + m * 27, Ty + m * 35);
    glVertex2f(Tx + m * 13, Ty + m * 35);

    glColor3ub(0,0,0);//black
    glVertex2f(Tx + m * 45, Ty + m * 13);
    glVertex2f(Tx + m * 55, Ty + m * 13);
    glVertex2f(Tx + m * 55, Ty + m * 27);
    glVertex2f(Tx + m * 45, Ty + m * 27);

    glVertex2f(Tx + m * 85, Ty + m * 13);
    glVertex2f(Tx + m * 95, Ty + m * 13);
    glVertex2f(Tx + m * 95, Ty + m * 27);
    glVertex2f(Tx + m * 85, Ty + m * 27);
    glEnd();

    // Door
    glBegin(GL_QUADS);
    glColor3ub(0,0,0);//black
    glVertex2f(Tx + m * 80, Ty + m * 0);
    glVertex2f(Tx + m * 60, Ty + m * 0);
    glVertex2f(Tx + m * 60, Ty + m * 35);
    glVertex2f(Tx + m * 80, Ty + m * 35);
    glEnd();
}

int angle = 0;

void boat(float Tx = 0, float Ty = 0, float m = 1)

{
    //Boat mastul

    glBegin(GL_POLYGON);

    glColor3ub(31, 16, 16);

    glVertex2f(Tx + m * 0, Ty + m * 15);

    glVertex2f(Tx + m * 128, Ty + m * 15);

    glVertex2f(Tx + m * 138, Ty + m * 20);

    glVertex2f(Tx + m * 138, Ty + m * 8);

    glVertex2f(Tx + m * 137, Ty + m * 6);

    glVertex2f(Tx + m * 137, Ty + m * 4);

    glVertex2f(Tx + m * 135, Ty + m * 2);

    glVertex2f(Tx + m * 134, Ty + m * 1);

    glVertex2f(Tx + m * 132, Ty + m * 1);

    glVertex2f(Tx + m * 129, Ty + m * 0);

    glVertex2f(Tx + m * 126, Ty + m * 0);

    glVertex2f(Tx + m * 4, Ty + m * 0);

    glVertex2f(Tx + m * 0, Ty + m * 15);

    glEnd();


    //2 sail Boat Sail

    if(night)

        glColor3ub (127,0,255);//purple

    else
        glColor3ub(204,153,255);//levender

    glBegin(GL_TRIANGLES);


    glVertex2f(Tx + m * 62, Ty + m * 121);

    glVertex2f(Tx + m * 2, Ty + m * 27);

    glVertex2f(Tx + m * 62, Ty + m * 27);



    //1 sail Boat Sail

    if(night) glColor3ub (127,0,255);//purple


    else  glColor3ub(204,153,255); //levender





    glVertex2f(Tx + m * 63, Ty + m * 163);

    glVertex2f(Tx + m * 66, Ty + m * 14);

    glVertex2f(Tx + m * 121, Ty + m * 47);



    glColor3ub(10, 24, 32);

    glVertex2f(Tx + m * 63, Ty + m * 163);

    glVertex2f(Tx + m * 62, Ty + m * 13);

    glVertex2f(Tx + m * 66, Ty + m * 13);

    glEnd();

}

//cloud //puja

//cloud 1

void cloud1(float Tx, float Ty, float m=1)
{
    if(night)
    {

        glColor3ub(69, 69, 69);

    }else{

        if(rainday)

        {

            glColor3f(0.500, 0.500, 0.500);

        }else{

            glColor3ub(255,255,255);

        }

    }


    glPushMatrix();

    circle(Tx + m * 16, Ty + m * 20, 15, 15);

    circle(Tx + m * 29, Ty + m * 31, 9, 9);

    circle(Tx + m * 58, Ty + m * 30, 27, 27);

    circle(Tx + m * 85, Ty + m * 21, 20, 20);

    glPopMatrix();


    glPushMatrix();

    glBegin(GL_QUADS);

    glVertex2f(Tx+m*17, Ty+m*23);

    glVertex2f(Tx+m*85, Ty+m*23);

    glVertex2f(Tx+m*85, Ty+m*1);

    glVertex2f(Tx+m*17, Ty+m*5);

    glEnd();


    glPopMatrix();


}




//cloud 2
void cloud2(float Tx, float Ty, float m=1)

{

    if(night){glColor3ub(46, 46, 46);}

    else{

        if(rainday)

        {

            glColor3f(0.500, 0.500, 0.500);

        }

        else{

            glColor3ub(255,255,255);

        }

    }



    glPushMatrix();

    circle(Tx + m * 13, Ty + m * 16, 7, 7);

    circle(Tx + m * 24, Ty + m * 24, 9, 9);

    circle(Tx + m * 40, Ty + m * 32, 12, 12);

    circle(Tx + m * 54, Ty + m * 36, 7, 7);

    circle(Tx + m * 74, Ty + m * 40, 16, 16);

    circle(Tx + m * 95, Ty + m * 40, 10, 10);

    circle(Tx + m * 108, Ty + m * 34, 6, 6);

    circle(Tx + m * 122, Ty + m * 31, 10, 10);

    circle(Tx + m * 132, Ty + m * 25, 10, 10);

    circle(Tx + m * 144, Ty + m * 16, 6, 6);

    glPopMatrix();





    glPushMatrix();

    glBegin(GL_QUADS);

    glVertex2f(Tx+m*12, Ty+m*18);

    glVertex2f(Tx+m*146, Ty+m*18);

    glVertex2f(Tx+m*146, Ty+m*11);

    glVertex2f(Tx+m*11, Ty+m*10);

    glEnd();

    glPopMatrix();



    glPushMatrix();

    glBegin(GL_QUADS);

    glVertex2f(Tx+m*20, Ty+m*32);

    glVertex2f(Tx+m*138, Ty+m*32);

    glVertex2f(Tx+m*138, Ty+m*17);

    glVertex2f(Tx+m*20, Ty+m*17);

    glEnd();

    glPopMatrix();



}


//cloud 3
void cloud3(float Tx, float Ty, float m=1)

{

    if(night)

    {

        glColor3ub(69, 69, 69);

    }

    else{

        if(rainday)

        {

            glColor3f(0.500, 0.500, 0.500);

        }

        else{

            glColor3ub(255,255,255);

        }

    }

    circle(Tx + m * 23, Ty + m * 33, 21, 21);

    circle(Tx + m * 50, Ty + m * 49, 20, 20);

    circle(Tx + m * 80, Ty + m * 43, 14, 14);

    circle(Tx + m * 90, Ty + m * 32, 17, 17);

    circle(Tx + m * 68, Ty + m * 23, 21, 21);

    circle(Tx + m * 43, Ty + m * 17, 17, 17);

    circle(Tx + m * 23, Ty + m * 33, 22, 22);

}





void cloud1_motion(int value)

{

    if (cloud1_position < -2000)

        cloud1_position = 1920;



    cloud1_position -= 2;

    glutPostRedisplay();

    glutTimerFunc(30, cloud1_motion, 0);//speed

}



void cloud2_motion(int value)

{

    if (cloud2_position > 2100)

        cloud2_position = -100;



    cloud2_position += 1;

    glutPostRedisplay();

    glutTimerFunc(30, cloud2_motion, 0);

}



void cloud3_motion(int value)

{

    if (cloud3_position < -2000)

        cloud3_position = 1920;



    cloud3_position -= 1;

    glutPostRedisplay();

    glutTimerFunc(30, cloud3_motion, 0);

}







void boat_motion(int value)

{

    if (boat_position > 2100)

        boat_position = -150;



    boat_position += boat_speed;

    glutPostRedisplay();

    glutTimerFunc(30, boat_motion, 0);

}



void boat_far_motion(int value)

{

    if (boat_far_position < -2000)

        boat_far_position = -150;



    boat_far_position -= boat_far_speed;

    glutPostRedisplay();

    glutTimerFunc(30, boat_far_motion, 0);

}





GLfloat sunSpeed ;

void sunset(float Setx)

{

    sunSpeed=Setx;

}

GLfloat sunMove ;

void skyColor(float Setx)

{

    sunMove=Setx;

}

void update_sun(int value)

{

    _move_sun -= sunMove;

    sun_position-=sunSpeed;

    if(_move_sun+1.0 < 0.10)

    {

        sun_position=50;

    }

    glutPostRedisplay();

    glutTimerFunc(10, update_sun, 0);//sun speed

}


void Rain(int value)//Jahin

{

    if (rainday)

    {

       _rain += 0.01f;



        glBegin(GL_POINTS);

        for (int i = 1; i <= 1000; i++)

        {

            int x = rand(), y = rand();

            x %= 1920;

            y %= 1080;

            glBegin(GL_LINES);

            glColor3f(1.0, 1.0, 1.0);

            glVertex2d(x, y);

            glVertex2d(x + 5, y + 5);

            glEnd();

        }

        glutPostRedisplay();

        glutTimerFunc(5, Rain, 0);

        glFlush();

    }

}




//cars movement
void update_cars(int value) {



    car1PositionX += 5.0;





    car2PositionX -= 5.0;





    if (car1PositionX > 1920)

        car1PositionX = -50;



    if (car2PositionX < -60) // Adjusted for the larger car size

        car2PositionX = 1920;



    glutPostRedisplay();

    glutTimerFunc(8, update_cars, 0);
}


//all button
void myKeyboard(unsigned char key, int x, int y)

{

    switch (key)

    {

    case 'r':

        rainday = true;

        Rain(_rain);

        break;

    case 'n':

        night = true;



        break;

    case 's':

        night = false;

        _move_sun = 1.0f;

        sun_position=50;

        sunset(0);

        skyColor(0.0);

        break;

    case 'a':

        rainday = false;

        break;

    case 'w':

        sunset(1);

        skyColor(0.0023f);

        break;

    case 'b':

        boat_speed+=5;//big boat fast

        break;

    case 'v':

        boat_speed -= 5;//big boast slow

        break;

    case 'f':

        boat_far_speed += 2;//small boat fast

        break;

    case 'd':

        boat_far_speed -= 2;//small boast slow

        break;



    default:

        break;

    }

}

//calling all function

void myDisplay(void)

{



    {

        glClear(GL_COLOR_BUFFER_BIT);

        sky();



        ///------------------------------

        if(!night)

        {

            if(!rainday)

            {

              sun();

            }



         }

        ///------------------------------

        glPushMatrix();

        glTranslatef(cloud1_position, 0.0f, 0.0f);

        glColor3ub(255, 255, 255);

         cloud1(1920, 800);

        glPopMatrix();



        ///------------------------------

        glPushMatrix();

        glTranslatef(cloud2_position, 0.0f, 0.0f);

         cloud2(0, 900);

        glPopMatrix();



        ///------------------------------



        glPushMatrix();

        glTranslatef(cloud3_position, 0.0f, 0.0f);

       cloud3(1200, 1000);

        glPopMatrix();



        ///------------------------------
        hill();
        ground();
        road();
        car1(car1PositionX, 400, 0.7); // First car
        car2(car2PositionX, 420, 0.7); // Second car (bigger)
        glPopMatrix();
        beach();

        sea();
        house1(1200,465);
        house2(1000, 465);
        house3(800,465);

        ///------------------------------

        glPushMatrix();

        glTranslatef(boat_far_position, 0.0f, 0.0f);

        boat(2000, 150, 0.5);

        glPopMatrix();

        ///------------------------------



        ///------------------------------

        glPushMatrix();

        glTranslatef(boat_position, 0.0f, 0.0f);

        boat(-200, 250);

        glPopMatrix();

        ///------------------------------

    }


    glFlush();

}


void myInit(void)

{

    glClearColor(1.0, 1.0, 1.0, 0.0);

    glColor3f(0.0f, 0.0f, 0.0f);

    glPointSize(4.0);

    glMatrixMode(GL_PROJECTION);

    glLoadIdentity();

    gluOrtho2D(0.0, 1920.0, 0.0, 1080.0);

}


int main(int argc, char** argv)

{

    glutInit(&argc, argv);

    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);

    glutInitWindowSize(1920, 1080);

    glutInitWindowPosition(0, 0);

    glutCreateWindow("Marine Drive");

    glutDisplayFunc(myDisplay);

    myInit();

    glutKeyboardFunc(myKeyboard);

    glutTimerFunc(1000, cloud1_motion, 0);

    glutTimerFunc(1000, cloud2_motion, 0);

    glutTimerFunc(1000, cloud3_motion, 0);

    glutTimerFunc(1000, boat_motion, 0);

    glutTimerFunc(1000, boat_far_motion, 0);

    glutTimerFunc(1000, update_sun, 0);

    glutTimerFunc(25, update_cars, 0);

    glutMainLoop();

    return 0;

}
